$spaceVpx: 18px;

@function perc($n) {
  @return $n * 1%;
}

@function float($n, $decimals, $boolFloor) {
	$y: 10 * $decimals;
	$x: $n * $y;
	@if ($boolFloor) {
		$x: floor($x);
	} @else {
		$x: round($x);
	}
	$x: $x / $y;
	@return $x;
}

@function colWidth($colN) {
	$totalC: 100 - ($colN - 1) * $columnGutterPerc;
	$firstCw: $totalC / $colN;
	$cw: $firstCw + $columnGutterPerc / 2;
//	@debug "colN: " + $colN + "; $firstCw: " + $firstCw + "; $cw: " + $cw;
	@return $cw;
}

@mixin col($colN) {
	$w: colWidth($colN);
	$wPerc: perc($w);
	width: $wPerc;
//	@debug "w%: " + $wPerc;
	&:first-child {
		width: perc($w - $columnGutterPerc / 2);
//		@debug "first col w%: " + perc($w - $columnGutterPerc / 2);
	}
}

.columns {
	height: 100%;
	padding: 20px 0;
	position: relative;
	.columns {
		padding: 0; // Don't pad when columns is nested
	}
	
	.row {
//		background: rgba(yellow, 0.1);
		border-top: 1px solid $colorBorder;
		margin-top: $spaceVpx;
		padding-top: $spaceVpx;
		&:first-child {
			border-top: none;
			margin-top: 0;
			padding-top: 0;
		}
		&.no-h-border .col {
			border: none;
		}
	}

	.col {
//		background: rgba(red, 0.1);
		border-left: 1px solid $colorBorder;
		box-sizing: border-box;
		display: block;
		float: left;
		margin-left: perc($columnGutterPerc / 2);
		padding-left: perc($columnGutterPerc / 2);
		position: relative;
		&:first-child {
			border-left: none;
			margin-left: 0;
			padding-left: 0;
		}
	}
	
	.cols-1 > .col {
		border-left: none;
		float: none;
		margin-left: 0;
		padding-left: 0;
	}
	
	.cols-2 > .col {
		@include col(2);
	}
	
	.cols-3 > .col {
		@include col(3);
	}
	
	.cols-4 > .col {
		@include col(4);
	}
	
	.cols-1-3 > .col {
		$w: colWidth(3); //69.25%;
		$width: perc($w * 2);
		&:first-child {
			width: perc($w - $columnGutterPerc / 2);
		}
	}
	
	.cols-2-3 > .col {
		$w: colWidth(3);
		width: perc($w);
		&:first-child {
			width: perc(($w * 2) - $columnGutterPerc / 2);
		}
	}
}